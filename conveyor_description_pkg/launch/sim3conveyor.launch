<launch>

    <!-- 
        DATAFLOW:
        input -> model_mapping -> control2gazebo -> gazebo -> algorithm
     -->

    <!-- these are the arguments you can pass this launch file, for example paused:=true -->
    <arg name="paused" default="false" />
    <arg name="use_sim_time" default="true" />
    <arg name="gui" default="true" />
    <arg name="headless" default="false" />
    <arg name="debug" default="false" />

    <!-- We resume the logic in empty_world.launch, changing only the name of the world to be
    launched -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="debug" value="$(arg debug)" />
        <arg name="gui" value="$(arg gui)" />
        <arg name="paused" value="$(arg paused)" />
        <arg name="use_sim_time" value="$(arg use_sim_time)" />
        <arg name="headless" value="$(arg headless)" />
    </include>

    <!-- Load the URDF into the ROS Parameter Server -->
    <param name="robot_description"
        command="$(find xacro)/xacro --inorder '$(find conveyor_description_pkg)/urdf/conveyor_multi.xacro'" />

    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot 1 -->
    <group ns="/robot1">
        <param name="tf_prefix" value="conveyor1" />
        <rosparam file="$(find conveyor_control)/config/conveyor_control_multi.yaml" command="load"
            ns="/robot1" />
        <param name="/robot1/robot_description"
            command="$(find xacro)/xacro --inorder '$(find conveyor_description_pkg)/urdf/conveyor_multi.xacro'" />

        <node name="urdf_spawner_1" pkg="gazebo_ros" type="spawn_model"
            args="-x -3 -y 0 -z 1 -unpause -urdf -model robot1 -param robot_description "
            respawn="false"
            output="screen">
        </node>


        <!-- <node pkg="robot_state_publisher" type="robot_state_publisher"
            name="robot_state_publisher_1">
            <param name="publish_frequency" type="double" value="30.0" />
        </node> -->

        <node name="robot1_controller_spawner" pkg="controller_manager" type="spawner"
            respawn="false"
            output="screen" ns="/robot1"
            args="joint_state_controller
            servo_front_right_position_controller
			servo_front_left_position_controller
            servo_back_right_position_controller
            servo_back_left_position_controller
            front_right_wheel_velocity_controller
            front_left_wheel_velocity_controller
            back_right_wheel_velocity_controller
            back_left_wheel_velocity_controller" />


        <node name="model_mapping" pkg="conveyor_description_pkg" type="mapping_multi"
            output="screen">
            <param name="default_topic" value="/robot1/mapping" />
            <param name="namespace" value="robot1" />
        </node>
        <node name="control2gazebo" pkg="conveyor_control" type="control2gazebo_multi"
            output="screen">
            <param name="default_topic" value="/robot1/control2gazebo" />
            <param name="namespace" value="robot1" />
        </node>

        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
            respawn="false" output="screen">
            <remap from="/joint_states" to="robot1/joint_states" />
        </node>

    </group>

    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot 2 -->
    <group ns="/robot2">
        <param name="tf_prefix" value="conveyor2" />
        <rosparam file="$(find conveyor_control)/config/conveyor_control_multi.yaml" command="load"
            ns="/robot2" />
        <param name="/robot2/robot_description"
            command="$(find xacro)/xacro --inorder '$(find conveyor_description_pkg)/urdf/conveyor_multi.xacro'" />

        <node name="urdf_spawner_2" pkg="gazebo_ros" type="spawn_model"
            args="-x -3 -y 1.4 -z 1 -unpause -urdf -model robot2 -param robot_description "
            respawn="false"
            output="screen">
        </node>

        <node name="robot2_controller_spawner" pkg="controller_manager" type="spawner"
            respawn="false"
            output="screen" ns="/robot2"
            args="joint_state_controller
            servo_front_right_position_controller
			servo_front_left_position_controller
            servo_back_right_position_controller
            servo_back_left_position_controller
            front_right_wheel_velocity_controller
            front_left_wheel_velocity_controller
            back_right_wheel_velocity_controller
            back_left_wheel_velocity_controller" />


        <node name="model_mapping" pkg="conveyor_description_pkg" type="mapping_multi"
            output="screen">
            <param name="default_topic" value="/robot2/mapping" />
            <param name="namespace" value="robot2" />
        </node>
        <node name="control2gazebo" pkg="conveyor_control" type="control2gazebo_multi"
            output="screen">
            <param name="default_topic" value="/robot2/control2gazebo" />
            <param name="namespace" value="robot2" />
        </node>

        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
            respawn="false" output="screen">
            <remap from="/joint_states" to="robot2/joint_states" />
        </node>

    </group>

    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot 3 -->
    <group ns="/robot3">
        <param name="tf_prefix" value="conveyor2" />
        <rosparam file="$(find conveyor_control)/config/conveyor_control_multi.yaml" command="load"
            ns="/robot3" />
        <param name="/robot3/robot_description"
            command="$(find xacro)/xacro --inorder '$(find conveyor_description_pkg)/urdf/conveyor_multi.xacro'" />

        <node name="urdf_spawner_2" pkg="gazebo_ros" type="spawn_model"
            args="-x -3 -y -1.4 -z 1 -unpause -urdf -model robot3 -param robot_description "
            respawn="false"
            output="screen">
        </node>

        <node name="robot3_controller_spawner" pkg="controller_manager" type="spawner"
            respawn="false"
            output="screen" ns="/robot3"
            args="joint_state_controller
            servo_front_right_position_controller
			servo_front_left_position_controller
            servo_back_right_position_controller
            servo_back_left_position_controller
            front_right_wheel_velocity_controller
            front_left_wheel_velocity_controller
            back_right_wheel_velocity_controller
            back_left_wheel_velocity_controller" />


        <node name="model_mapping" pkg="conveyor_description_pkg" type="mapping_multi"
            output="screen">
            <param name="default_topic" value="/robot3/mapping" />
            <param name="namespace" value="robot3" />
        </node>
        <node name="control2gazebo" pkg="conveyor_control" type="control2gazebo_multi"
            output="screen">
            <param name="default_topic" value="/robot3/control2gazebo" />
            <param name="namespace" value="robot3" />
        </node>

        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
            respawn="false" output="screen">
            <remap from="/joint_states" to="robot3/joint_states" />
        </node>

    </group>

    <!-- <node name="urdf_spawner1" pkg="gazebo_ros" type="spawn_model" respawn="false"
    output="screen"
        args="-urdf -model conveyor1 -param robot_description -x -3 -y 0 -z 1" />
    <node name="urdf_spawner2" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
        args="-urdf -model conveyor2 -param robot_description -x -3 -y 2 -z 1" /> -->

    <!-- Algorithm -->
    <!-- <node name="model_mapping" pkg="conveyor_description_pkg" type="mapping" output="screen" />
    <node name="control2gazebo" pkg="conveyor_control" type="control2gazebo" /> -->

    <!-- ros_control conveyor launch file -->
    <!-- <include file="$(find conveyor_control)/launch/conveyor_control.launch" /> -->

</launch>