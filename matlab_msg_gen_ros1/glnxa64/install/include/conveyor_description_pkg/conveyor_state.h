// Generated by gencpp from file conveyor_description_pkg/conveyor_state.msg
// DO NOT EDIT!


#ifndef CONVEYOR_DESCRIPTION_PKG_MESSAGE_CONVEYOR_STATE_H
#define CONVEYOR_DESCRIPTION_PKG_MESSAGE_CONVEYOR_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace conveyor_description_pkg
{
template <class ContainerAllocator>
struct conveyor_state_
{
  typedef conveyor_state_<ContainerAllocator> Type;

  conveyor_state_()
    : wheel_lr(0.0)
    , wheel_rr(0.0)
    , wheel_lf(0.0)
    , wheel_rf(0.0)
    , joint_lr(0.0)
    , joint_rr(0.0)
    , joint_lf(0.0)
    , joint_rf(0.0)  {
    }
  conveyor_state_(const ContainerAllocator& _alloc)
    : wheel_lr(0.0)
    , wheel_rr(0.0)
    , wheel_lf(0.0)
    , wheel_rf(0.0)
    , joint_lr(0.0)
    , joint_rr(0.0)
    , joint_lf(0.0)
    , joint_rf(0.0)  {
  (void)_alloc;
    }



   typedef float _wheel_lr_type;
  _wheel_lr_type wheel_lr;

   typedef float _wheel_rr_type;
  _wheel_rr_type wheel_rr;

   typedef float _wheel_lf_type;
  _wheel_lf_type wheel_lf;

   typedef float _wheel_rf_type;
  _wheel_rf_type wheel_rf;

   typedef float _joint_lr_type;
  _joint_lr_type joint_lr;

   typedef float _joint_rr_type;
  _joint_rr_type joint_rr;

   typedef float _joint_lf_type;
  _joint_lf_type joint_lf;

   typedef float _joint_rf_type;
  _joint_rf_type joint_rf;





  typedef boost::shared_ptr< ::conveyor_description_pkg::conveyor_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::conveyor_description_pkg::conveyor_state_<ContainerAllocator> const> ConstPtr;

}; // struct conveyor_state_

typedef ::conveyor_description_pkg::conveyor_state_<std::allocator<void> > conveyor_state;

typedef boost::shared_ptr< ::conveyor_description_pkg::conveyor_state > conveyor_statePtr;
typedef boost::shared_ptr< ::conveyor_description_pkg::conveyor_state const> conveyor_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::conveyor_description_pkg::conveyor_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::conveyor_description_pkg::conveyor_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::conveyor_description_pkg::conveyor_state_<ContainerAllocator1> & lhs, const ::conveyor_description_pkg::conveyor_state_<ContainerAllocator2> & rhs)
{
  return lhs.wheel_lr == rhs.wheel_lr &&
    lhs.wheel_rr == rhs.wheel_rr &&
    lhs.wheel_lf == rhs.wheel_lf &&
    lhs.wheel_rf == rhs.wheel_rf &&
    lhs.joint_lr == rhs.joint_lr &&
    lhs.joint_rr == rhs.joint_rr &&
    lhs.joint_lf == rhs.joint_lf &&
    lhs.joint_rf == rhs.joint_rf;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::conveyor_description_pkg::conveyor_state_<ContainerAllocator1> & lhs, const ::conveyor_description_pkg::conveyor_state_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace conveyor_description_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::conveyor_description_pkg::conveyor_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::conveyor_description_pkg::conveyor_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::conveyor_description_pkg::conveyor_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::conveyor_description_pkg::conveyor_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::conveyor_description_pkg::conveyor_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::conveyor_description_pkg::conveyor_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::conveyor_description_pkg::conveyor_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "96adf6e381d361fa17e96ad4a3f64ab8";
  }

  static const char* value(const ::conveyor_description_pkg::conveyor_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x96adf6e381d361faULL;
  static const uint64_t static_value2 = 0x17e96ad4a3f64ab8ULL;
};

template<class ContainerAllocator>
struct DataType< ::conveyor_description_pkg::conveyor_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "conveyor_description_pkg/conveyor_state";
  }

  static const char* value(const ::conveyor_description_pkg::conveyor_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::conveyor_description_pkg::conveyor_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 wheel_lr\n"
"float32 wheel_rr\n"
"float32 wheel_lf\n"
"float32 wheel_rf\n"
"float32 joint_lr\n"
"float32 joint_rr\n"
"float32 joint_lf\n"
"float32 joint_rf\n"
;
  }

  static const char* value(const ::conveyor_description_pkg::conveyor_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::conveyor_description_pkg::conveyor_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.wheel_lr);
      stream.next(m.wheel_rr);
      stream.next(m.wheel_lf);
      stream.next(m.wheel_rf);
      stream.next(m.joint_lr);
      stream.next(m.joint_rr);
      stream.next(m.joint_lf);
      stream.next(m.joint_rf);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct conveyor_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::conveyor_description_pkg::conveyor_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::conveyor_description_pkg::conveyor_state_<ContainerAllocator>& v)
  {
    s << indent << "wheel_lr: ";
    Printer<float>::stream(s, indent + "  ", v.wheel_lr);
    s << indent << "wheel_rr: ";
    Printer<float>::stream(s, indent + "  ", v.wheel_rr);
    s << indent << "wheel_lf: ";
    Printer<float>::stream(s, indent + "  ", v.wheel_lf);
    s << indent << "wheel_rf: ";
    Printer<float>::stream(s, indent + "  ", v.wheel_rf);
    s << indent << "joint_lr: ";
    Printer<float>::stream(s, indent + "  ", v.joint_lr);
    s << indent << "joint_rr: ";
    Printer<float>::stream(s, indent + "  ", v.joint_rr);
    s << indent << "joint_lf: ";
    Printer<float>::stream(s, indent + "  ", v.joint_lf);
    s << indent << "joint_rf: ";
    Printer<float>::stream(s, indent + "  ", v.joint_rf);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONVEYOR_DESCRIPTION_PKG_MESSAGE_CONVEYOR_STATE_H
