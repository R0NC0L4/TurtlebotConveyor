// Generated by gencpp from file conveyor_description_pkg/desired_conf.msg
// DO NOT EDIT!


#ifndef CONVEYOR_DESCRIPTION_PKG_MESSAGE_DESIRED_CONF_H
#define CONVEYOR_DESCRIPTION_PKG_MESSAGE_DESIRED_CONF_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace conveyor_description_pkg
{
template <class ContainerAllocator>
struct desired_conf_
{
  typedef desired_conf_<ContainerAllocator> Type;

  desired_conf_()
    : velocity(0.0)
    , angular_velocity(0.0)
    , angle(0.0)
    , conf(0)  {
    }
  desired_conf_(const ContainerAllocator& _alloc)
    : velocity(0.0)
    , angular_velocity(0.0)
    , angle(0.0)
    , conf(0)  {
  (void)_alloc;
    }



   typedef float _velocity_type;
  _velocity_type velocity;

   typedef float _angular_velocity_type;
  _angular_velocity_type angular_velocity;

   typedef float _angle_type;
  _angle_type angle;

   typedef int8_t _conf_type;
  _conf_type conf;





  typedef boost::shared_ptr< ::conveyor_description_pkg::desired_conf_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::conveyor_description_pkg::desired_conf_<ContainerAllocator> const> ConstPtr;

}; // struct desired_conf_

typedef ::conveyor_description_pkg::desired_conf_<std::allocator<void> > desired_conf;

typedef boost::shared_ptr< ::conveyor_description_pkg::desired_conf > desired_confPtr;
typedef boost::shared_ptr< ::conveyor_description_pkg::desired_conf const> desired_confConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::conveyor_description_pkg::desired_conf_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::conveyor_description_pkg::desired_conf_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::conveyor_description_pkg::desired_conf_<ContainerAllocator1> & lhs, const ::conveyor_description_pkg::desired_conf_<ContainerAllocator2> & rhs)
{
  return lhs.velocity == rhs.velocity &&
    lhs.angular_velocity == rhs.angular_velocity &&
    lhs.angle == rhs.angle &&
    lhs.conf == rhs.conf;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::conveyor_description_pkg::desired_conf_<ContainerAllocator1> & lhs, const ::conveyor_description_pkg::desired_conf_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace conveyor_description_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::conveyor_description_pkg::desired_conf_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::conveyor_description_pkg::desired_conf_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::conveyor_description_pkg::desired_conf_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::conveyor_description_pkg::desired_conf_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::conveyor_description_pkg::desired_conf_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::conveyor_description_pkg::desired_conf_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::conveyor_description_pkg::desired_conf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e8b7a946535a91bacc65aff8148d7d6e";
  }

  static const char* value(const ::conveyor_description_pkg::desired_conf_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe8b7a946535a91baULL;
  static const uint64_t static_value2 = 0xcc65aff8148d7d6eULL;
};

template<class ContainerAllocator>
struct DataType< ::conveyor_description_pkg::desired_conf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "conveyor_description_pkg/desired_conf";
  }

  static const char* value(const ::conveyor_description_pkg::desired_conf_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::conveyor_description_pkg::desired_conf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 velocity\n"
"float32 angular_velocity\n"
"float32 angle\n"
"int8 conf # 0: omni | 1: differrential | 2: ackerman | 3: rotate\n"
;
  }

  static const char* value(const ::conveyor_description_pkg::desired_conf_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::conveyor_description_pkg::desired_conf_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.velocity);
      stream.next(m.angular_velocity);
      stream.next(m.angle);
      stream.next(m.conf);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct desired_conf_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::conveyor_description_pkg::desired_conf_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::conveyor_description_pkg::desired_conf_<ContainerAllocator>& v)
  {
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "angular_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.angular_velocity);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "conf: ";
    Printer<int8_t>::stream(s, indent + "  ", v.conf);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONVEYOR_DESCRIPTION_PKG_MESSAGE_DESIRED_CONF_H
