// Generated by gencpp from file conveyor_description_pkg/buttons.msg
// DO NOT EDIT!


#ifndef CONVEYOR_DESCRIPTION_PKG_MESSAGE_BUTTONS_H
#define CONVEYOR_DESCRIPTION_PKG_MESSAGE_BUTTONS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace conveyor_description_pkg
{
template <class ContainerAllocator>
struct buttons_
{
  typedef buttons_<ContainerAllocator> Type;

  buttons_()
    : angle(0.0)
    , rb(false)  {
    }
  buttons_(const ContainerAllocator& _alloc)
    : angle(0.0)
    , rb(false)  {
  (void)_alloc;
    }



   typedef float _angle_type;
  _angle_type angle;

   typedef uint8_t _rb_type;
  _rb_type rb;





  typedef boost::shared_ptr< ::conveyor_description_pkg::buttons_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::conveyor_description_pkg::buttons_<ContainerAllocator> const> ConstPtr;

}; // struct buttons_

typedef ::conveyor_description_pkg::buttons_<std::allocator<void> > buttons;

typedef boost::shared_ptr< ::conveyor_description_pkg::buttons > buttonsPtr;
typedef boost::shared_ptr< ::conveyor_description_pkg::buttons const> buttonsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::conveyor_description_pkg::buttons_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::conveyor_description_pkg::buttons_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::conveyor_description_pkg::buttons_<ContainerAllocator1> & lhs, const ::conveyor_description_pkg::buttons_<ContainerAllocator2> & rhs)
{
  return lhs.angle == rhs.angle &&
    lhs.rb == rhs.rb;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::conveyor_description_pkg::buttons_<ContainerAllocator1> & lhs, const ::conveyor_description_pkg::buttons_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace conveyor_description_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::conveyor_description_pkg::buttons_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::conveyor_description_pkg::buttons_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::conveyor_description_pkg::buttons_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::conveyor_description_pkg::buttons_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::conveyor_description_pkg::buttons_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::conveyor_description_pkg::buttons_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::conveyor_description_pkg::buttons_<ContainerAllocator> >
{
  static const char* value()
  {
    return "222640963a46f585d04631e655f8bdf2";
  }

  static const char* value(const ::conveyor_description_pkg::buttons_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x222640963a46f585ULL;
  static const uint64_t static_value2 = 0xd04631e655f8bdf2ULL;
};

template<class ContainerAllocator>
struct DataType< ::conveyor_description_pkg::buttons_<ContainerAllocator> >
{
  static const char* value()
  {
    return "conveyor_description_pkg/buttons";
  }

  static const char* value(const ::conveyor_description_pkg::buttons_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::conveyor_description_pkg::buttons_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 angle\n"
"bool rb\n"
;
  }

  static const char* value(const ::conveyor_description_pkg::buttons_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::conveyor_description_pkg::buttons_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle);
      stream.next(m.rb);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct buttons_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::conveyor_description_pkg::buttons_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::conveyor_description_pkg::buttons_<ContainerAllocator>& v)
  {
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "rb: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rb);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONVEYOR_DESCRIPTION_PKG_MESSAGE_BUTTONS_H
